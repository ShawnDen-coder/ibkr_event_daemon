{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\u4e2d\u6587\u6587\u6863</p>"},{"location":"#ibkr-event-daemon","title":"IBKR Event Daemon","text":"<p>A flexible event-driven daemon for Interactive Brokers TWS/Gateway that handles real-time market data and trading events.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Event-driven architecture for handling IBKR market data and trading events</li> <li>Simple handler pattern for implementing custom event processors</li> <li>Built-in support for real-time bar data</li> <li>Configurable via environment variables or command-line options</li> <li>Comprehensive logging with rotation and retention policies</li> <li>Supervisor integration for process management</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install ibkr-event-daemon\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li> <p>Configure your environment variables in <code>.env</code>: <pre><code>IB_EVENT_DAEMON_HOST=127.0.0.1\nIB_EVENT_DAEMON_PORT=7497\nIB_EVENT_DAEMON_CLIENTID=1\nIB_EVENT_DAEMON_TIMEOUT=4\nIB_EVENT_DAEMON_READONLY=False\nIB_EVENT_DAEMON_ACCOUNT=\nIB_EVENT_DAEMON_RAISESYNCERRORS=False\nIB_EVENT_DAEMON_SETUP_PATHS=\"./example\"\n</code></pre></p> </li> <li> <p>Start the daemon: <pre><code>ibkr-daemon start\n</code></pre></p> </li> </ol> <p>Or with custom logging: <pre><code>ibkr-daemon start --log-level DEBUG --log-file logs/daemon.log\n</code></pre></p>"},{"location":"#creating-custom-handlers","title":"Creating Custom Handlers","text":"<p>Handlers are Python modules that process IBKR events. Place your handlers in the directory specified by <code>IB_EVENT_DAEMON_SETUP_PATHS</code>.</p> <p>Example handler for real-time bar data (<code>example/realtimebar_example.py</code>):</p> <pre><code>from ib_async import IB, Forex\nfrom ibkr_event_daemon.core import LoggerType\n\ndef setup(ib: IB, logger: LoggerType) -&gt; None:\n    usd_jpy = Forex('USDJPY')\n    bars = ib.reqRealTimeBars(\n        usd_jpy, \n        barSize=5, \n        whatToShow=\"MIDPOINT\", \n        useRTH=True\n    )\n    bars.updateEvent += onBarUpdate\n\ndef onBarUpdate(bars, hasNewBar):\n    if hasNewBar:\n        print(bars[-1])\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Configuration can be managed through: - Environment variables (<code>.env</code> file) - Command-line options - Configuration commands</p> <p>Show current configuration: <pre><code>ibkr-daemon config show\n</code></pre></p> <p>Initialize default configuration: <pre><code>ibkr-daemon config init\n</code></pre></p>"},{"location":"#process-management","title":"Process Management","text":"<p>The project includes a <code>supervisord.conf</code> for process management. This allows for: - Automatic restart on failure - Process monitoring - Log management</p>"},{"location":"#development","title":"Development","text":"<p>To run in development mode:</p> <ol> <li>Clone the repository</li> <li>Install dependencies: <pre><code>pip install -e .\n</code></pre></li> <li>Create and configure <code>.env</code> file: <pre><code>ibkr-daemon config init\n</code></pre></li> <li>Start the daemon: <pre><code>python -m ibkr_event_daemon start\n</code></pre></li> </ol>"},{"location":"#license","title":"License","text":"<p>MIT License</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>ibkr_event_daemon<ul> <li>config</li> <li>constants</li> <li>core</li> <li>utils</li> </ul> </li> </ul>"},{"location":"reference/ibkr_event_daemon/","title":"Index","text":""},{"location":"reference/ibkr_event_daemon/#ibkr_event_daemon","title":"ibkr_event_daemon","text":""},{"location":"reference/ibkr_event_daemon/config/","title":"config","text":""},{"location":"reference/ibkr_event_daemon/config/#ibkr_event_daemon.config","title":"ibkr_event_daemon.config","text":"<p>Configuration module for the IBKR event daemon.</p> <p>This module provides configuration settings for connecting to Interactive Brokers TWS/Gateway using pydantic for validation and environment variable support.</p> Example"},{"location":"reference/ibkr_event_daemon/config/#ibkr_event_daemon.config--create-settings-from-environment-variables","title":"Create settings from environment variables","text":"<p>settings = IbkrSettings()</p>"},{"location":"reference/ibkr_event_daemon/config/#ibkr_event_daemon.config--create-settings-with-custom-values","title":"Create settings with custom values","text":"<p>settings = IbkrSettings( ...     host='127.0.0.1', ...     port=4002,  # Paper trading port ...     clientid=12 ... )</p>"},{"location":"reference/ibkr_event_daemon/config/#ibkr_event_daemon.config.IbkrSettings","title":"IbkrSettings","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Configuration settings for IBKR connection and client.</p> <p>This class uses pydantic BaseSettings to manage configuration through environment variables with the prefix defined in constants.ENV_PREFIX. Settings can be loaded from a .env file.</p> ATTRIBUTE DESCRIPTION <code>host</code> <p>The IBKR TWS/Gateway host address. Defaults to '127.0.0.1'.</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>The IBKR TWS/Gateway port number. Defaults to 7497.</p> <p> TYPE: <code>int</code> </p> <code>clientid</code> <p>The client ID for IBKR connection. Defaults to 1.</p> <p> TYPE: <code>int</code> </p> <code>timeout</code> <p>Connection timeout in seconds. Defaults to 4.</p> <p> TYPE: <code>int</code> </p> <code>readonly</code> <p>Whether to connect in read-only mode. Defaults to False.</p> <p> TYPE: <code>bool</code> </p> <code>account</code> <p>IBKR account identifier. Defaults to empty string.</p> <p> TYPE: <code>str</code> </p> <code>raisesyncerrors</code> <p>Whether to raise sync errors. Defaults to False.</p> <p> TYPE: <code>bool</code> </p> <code>setup_paths</code> <p>Optional paths for setup configuration. Defaults to None.</p> <p> TYPE: <code>Optional[str]</code> </p> Example"},{"location":"reference/ibkr_event_daemon/config/#ibkr_event_daemon.config.IbkrSettings--load-from-environment-variables","title":"Load from environment variables","text":"<p>settings = IbkrSettings()</p>"},{"location":"reference/ibkr_event_daemon/config/#ibkr_event_daemon.config.IbkrSettings--create-with-custom-values","title":"Create with custom values","text":"<p>settings = IbkrSettings( ...     host='localhost', ...     port=4001, ...     clientid=123, ...     readonly=True ... )</p>"},{"location":"reference/ibkr_event_daemon/config/#ibkr_event_daemon.config.IbkrSettings--access-settings","title":"Access settings","text":"<p>print(f\"Connecting to {settings.host}:{settings.port}\")</p>"},{"location":"reference/ibkr_event_daemon/constants/","title":"constants","text":""},{"location":"reference/ibkr_event_daemon/constants/#ibkr_event_daemon.constants","title":"ibkr_event_daemon.constants","text":"<p>Constants module for the IBKR event daemon.</p> <p>This module contains constant values used throughout the IBKR event daemon.</p> Example <p>from ibkr_event_daemon.constants import ENV_PREFIX env_var = f\"{ENV_PREFIX}HOST\"  # Creates 'IB_EVENT_DAEMON_HOST' print(f\"Looking for environment variable: {env_var}\")</p>"},{"location":"reference/ibkr_event_daemon/core/","title":"core","text":""},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core","title":"ibkr_event_daemon.core","text":"<p>Core module for the IBKR event daemon.</p> <p>This module provides the main components for interacting with Interactive Brokers TWS/Gateway. It includes the core client wrapper and hook system for handling market data and events.</p> The module consists of two main components <ul> <li>IBKRClient: A high-level wrapper for managing IB connections and event handlers</li> <li>HookModule: A protocol defining the interface for event hook modules</li> </ul> Example <p>from ibkr_event_daemon.core import IBKRClient from ibkr_event_daemon.config import IbkrSettings</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core--create-client-with-custom-settings","title":"Create client with custom settings","text":"<p>config = IbkrSettings(port=4002)  # Use paper trading port client = IBKRClient(config=config)</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core--start-the-client-this-will-block-until-interrupted","title":"Start the client (this will block until interrupted)","text":"<p>client.excute()</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.HookModule","title":"HookModule","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol defining the interface for IBKR event hook modules.</p> <p>This protocol defines the required interface that hook modules must implement to be used with the IBKR event daemon.</p> Example <p>class MyHook: ...     def setup(self, ib: IB, logger: LoggerType) -&gt; None: ...         contract = Forex('EURUSD') ...         ib.reqMktData(contract)</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.HookModule.setup","title":"setup","text":"<pre><code>setup(ib: IB, logger: LoggerType) -&gt; None\n</code></pre> <p>Set up the hook module with IB client and logger instances.</p> PARAMETER DESCRIPTION <code>ib</code> <p>Interactive Brokers client instance.</p> <p> TYPE: <code>IB</code> </p> <code>logger</code> <p>Logger instance for recording events and errors.</p> <p> TYPE: <code>LoggerType</code> </p> Example <p>def setup(self, ib, logger): ...     # Subscribe to EURUSD market data ...     contract = Forex('EURUSD') ...     ib.reqMktData(contract) ...     logger.info(\"Subscribed to EURUSD market data\")</p> Source code in <code>ibkr_event_daemon/core.py</code> <pre><code>def setup(self, ib: IB, logger: LoggerType) -&gt; None:\n    \"\"\"Set up the hook module with IB client and logger instances.\n\n    Args:\n        ib: Interactive Brokers client instance.\n        logger: Logger instance for recording events and errors.\n\n    Example:\n        &gt;&gt;&gt; def setup(self, ib, logger):\n        ...     # Subscribe to EURUSD market data\n        ...     contract = Forex('EURUSD')\n        ...     ib.reqMktData(contract)\n        ...     logger.info(\"Subscribed to EURUSD market data\")\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient","title":"IBKRClient","text":"<pre><code>IBKRClient(ib: Optional[IB] = None, config: Optional[IbkrSettings] = None)\n</code></pre> <p>Interactive Brokers client wrapper for event handling.</p> <p>This class provides a high-level interface for connecting to Interactive Brokers, setting up event handlers, and managing the connection lifecycle.</p> ATTRIBUTE DESCRIPTION <code>ib</code> <p>Interactive Brokers client instance.</p> <p> TYPE: <code>IB</code> </p> <code>config</code> <p>Configuration settings for the IBKR connection.</p> <p> TYPE: <code>IbkrSettings</code> </p> Example <p>Initialize the IBKR client wrapper.</p> PARAMETER DESCRIPTION <code>ib</code> <p>Optional Interactive Brokers client instance. If not provided, a new one will be created.</p> <p> TYPE: <code>Optional[IB]</code> DEFAULT: <code>None</code> </p> <code>config</code> <p>Optional IbkrSettings instance. If not provided, a new instance with default values will be created.</p> <p> TYPE: <code>Optional[IbkrSettings]</code> DEFAULT: <code>None</code> </p> Example Source code in <code>ibkr_event_daemon/core.py</code> <pre><code>def __init__(self, ib: Optional[IB] = None, config: Optional[IbkrSettings] = None):\n    \"\"\"Initialize the IBKR client wrapper.\n\n    Args:\n        ib: Optional Interactive Brokers client instance. If not provided, a new one will be created.\n        config: Optional IbkrSettings instance. If not provided, a new instance with default values will be created.\n\n    Example:\n        &gt;&gt;&gt; # Create with custom IB instance\n        &gt;&gt;&gt; ib = IB()\n        &gt;&gt;&gt; client = IBKRClient(ib=ib)\n        &gt;&gt;&gt; # Create with custom config\n        &gt;&gt;&gt; config = IbkrSettings(port=4002)  # Use paper trading port\n        &gt;&gt;&gt; client = IBKRClient(config=config)\n    \"\"\"\n    self.ib: IB = ib or IB()\n    self.config: IbkrSettings = config or IbkrSettings()\n</code></pre>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient--create-client-with-default-settings","title":"Create client with default settings","text":"<p>client = IBKRClient()</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient--create-client-with-custom-settings","title":"Create client with custom settings","text":"<p>config = IbkrSettings(host='127.0.0.1', port=7497) client = IBKRClient(config=config)</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient--start-the-client","title":"Start the client","text":"<p>client.excute()</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient--create-with-custom-ib-instance","title":"Create with custom IB instance","text":"<p>ib = IB() client = IBKRClient(ib=ib)</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient--create-with-custom-config","title":"Create with custom config","text":"<p>config = IbkrSettings(port=4002)  # Use paper trading port client = IBKRClient(config=config)</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient._setup_callback","title":"_setup_callback","text":"<pre><code>_setup_callback()\n</code></pre> <p>Set up event callbacks from configured hook modules.</p> <p>Loads and initializes hook modules specified in the environment variable defined by constants.ENV_PREFIX + 'SETUP_PATHS'. Each hook module is initialized with the IB client and logger instances.</p> Example Source code in <code>ibkr_event_daemon/core.py</code> <pre><code>def _setup_callback(self):\n    \"\"\"Set up event callbacks from configured hook modules.\n\n    Loads and initializes hook modules specified in the environment variable\n    defined by constants.ENV_PREFIX + 'SETUP_PATHS'. Each hook module is\n    initialized with the IB client and logger instances.\n\n    Example:\n        &gt;&gt;&gt; # Assuming IB_EVENT_DAEMON_SETUP_PATHS points to valid hook modules\n        &gt;&gt;&gt; client = IBKRClient()\n        &gt;&gt;&gt; client._setup_callback()  # Loads and initializes all hooks\n    \"\"\"\n    files = self.config.setup_paths.split(os.pathsep)\n    logger.info(f\"get setup file hooks: {files}\")\n    files = utils.prepare_task_path(files)\n    for item in files:\n        moudle: Optional[HookModule] = utils.load_hook(item)\n        if not moudle:\n            continue\n        try:\n            moudle.setup(self.ib, logger)\n            logger.info(f\"setup callback func {moudle.__name__}\")\n        except AttributeError as e:\n            logger.exception(f\"load moudle {moudle.__name__} error: \\n {e}\")\n</code></pre>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient._setup_callback--assuming-ib_event_daemon_setup_paths-points-to-valid-hook-modules","title":"Assuming IB_EVENT_DAEMON_SETUP_PATHS points to valid hook modules","text":"<p>client = IBKRClient() client._setup_callback()  # Loads and initializes all hooks</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient._setup_ib_session","title":"_setup_ib_session","text":"<pre><code>_setup_ib_session()\n</code></pre> <p>Set up and establish connection to TWS/Gateway.</p> <p>Connects to Interactive Brokers using the configured settings and logs the connection attempt.</p> Example <p>client = IBKRClient() client._setup_ib_session() assert client.ib.isConnected()</p> Source code in <code>ibkr_event_daemon/core.py</code> <pre><code>def _setup_ib_session(self):\n    \"\"\"Set up and establish connection to TWS/Gateway.\n\n    Connects to Interactive Brokers using the configured settings and logs the connection attempt.\n\n    Example:\n        &gt;&gt;&gt; client = IBKRClient()\n        &gt;&gt;&gt; client._setup_ib_session()\n        &gt;&gt;&gt; assert client.ib.isConnected()\n    \"\"\"\n    logger.info(\"start connect TWS ...\")\n    _config = self.config.model_dump(by_alias=True, exclude=\"setup_paths\")\n    logger.debug(f\"loading ibkr config: {_config}\")\n    self.ib.connect(**_config)\n</code></pre>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient.excute","title":"excute","text":"<pre><code>excute() -&gt; None\n</code></pre> <p>Execute the main event loop.</p> <p>Starts the event loop and handles keyboard interrupts for graceful shutdown.</p> Example <p>client = IBKRClient()</p> Source code in <code>ibkr_event_daemon/core.py</code> <pre><code>def excute(self) -&gt; None:\n    \"\"\"Execute the main event loop.\n\n    Starts the event loop and handles keyboard interrupts for graceful shutdown.\n\n    Example:\n        &gt;&gt;&gt; client = IBKRClient()\n        &gt;&gt;&gt; # This will block until interrupted\n        &gt;&gt;&gt; client.excute()  # Starts the event loop\n    \"\"\"\n    try:\n        self.pre_action()\n        self.ib.run()\n    except KeyboardInterrupt:\n        self.stop()\n        logger.info(\"Program interrupted and stopped.\")\n</code></pre>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient.excute--this-will-block-until-interrupted","title":"This will block until interrupted","text":"<p>client.excute()  # Starts the event loop</p>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient.pre_action","title":"pre_action","text":"<pre><code>pre_action()\n</code></pre> <p>Perform pre-run setup actions.</p> <p>Ensures the client is properly configured before starting the event loop.</p> Example <p>client = IBKRClient() client.pre_action()  # Performs all necessary setup</p> Source code in <code>ibkr_event_daemon/core.py</code> <pre><code>def pre_action(self):\n    \"\"\"Perform pre-run setup actions.\n\n    Ensures the client is properly configured before starting the event loop.\n\n    Example:\n        &gt;&gt;&gt; client = IBKRClient()\n        &gt;&gt;&gt; client.pre_action()  # Performs all necessary setup\n    \"\"\"\n    self.setup()\n</code></pre>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient.setup","title":"setup","text":"<pre><code>setup()\n</code></pre> <p>Initialize the IBKR client and set up event handlers.</p> <p>Establishes connection to TWS/Gateway if not already connected and sets up event callbacks.</p> Example <p>client = IBKRClient() client.setup()  # Connects and sets up handlers assert client.ib.isConnected()</p> Source code in <code>ibkr_event_daemon/core.py</code> <pre><code>def setup(self):\n    \"\"\"Initialize the IBKR client and set up event handlers.\n\n    Establishes connection to TWS/Gateway if not already connected and sets up event callbacks.\n\n    Example:\n        &gt;&gt;&gt; client = IBKRClient()\n        &gt;&gt;&gt; client.setup()  # Connects and sets up handlers\n        &gt;&gt;&gt; assert client.ib.isConnected()\n    \"\"\"\n    if not self.ib.isConnected():\n        self._setup_ib_session()\n    self._setup_callback()\n</code></pre>"},{"location":"reference/ibkr_event_daemon/core/#ibkr_event_daemon.core.IBKRClient.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the IBKR client and clean up resources.</p> <p>Disconnects from TWS/Gateway and logs the shutdown.</p> Example <p>client = IBKRClient() client.setup() client.stop()  # Disconnects from TWS assert not client.ib.isConnected()</p> Source code in <code>ibkr_event_daemon/core.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the IBKR client and clean up resources.\n\n    Disconnects from TWS/Gateway and logs the shutdown.\n\n    Example:\n        &gt;&gt;&gt; client = IBKRClient()\n        &gt;&gt;&gt; client.setup()\n        &gt;&gt;&gt; client.stop()  # Disconnects from TWS\n        &gt;&gt;&gt; assert not client.ib.isConnected()\n    \"\"\"\n    logger.info(\"Stopping the IBKR daemon ...\")\n    self.ib.disconnect()\n</code></pre>"},{"location":"reference/ibkr_event_daemon/utils/","title":"utils","text":""},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils","title":"ibkr_event_daemon.utils","text":"<p>Utility functions for the IBKR event daemon.</p> <p>This module provides helper functions for loading hook modules and managing file paths.</p> Example"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils--load-hooks-from-environment-variable","title":"Load hooks from environment variable","text":"<p>hooks = prepare_task_path('IBKR_SETUP_PATHS') for hook_path in hooks: ...     hook = load_hook(hook_path) ...     if hook: ...         hook.setup(ib, logger)</p>"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils.collect_pyfile","title":"collect_pyfile","text":"<pre><code>collect_pyfile(path: str) -&gt; Optional[list[str]]\n</code></pre> <p>Collect Python files from a directory or single file path.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to a directory or Python file.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[list[str]]</code> <p>Optional[list[str]]: List of Python file paths if found, None otherwise.</p> Example Source code in <code>ibkr_event_daemon/utils.py</code> <pre><code>def collect_pyfile(path: str) -&gt; Optional[list[str]]:\n    \"\"\"Collect Python files from a directory or single file path.\n\n    Args:\n        path: Path to a directory or Python file.\n\n    Returns:\n        Optional[list[str]]: List of Python file paths if found, None otherwise.\n\n    Example:\n        &gt;&gt;&gt; # Collect Python files from a directory\n        &gt;&gt;&gt; files = collect_pyfile('/path/to/hooks')\n        &gt;&gt;&gt; if files:\n        ...     print(f\"Found {len(files)} Python files\")\n        &gt;&gt;&gt; # Check a single file\n        &gt;&gt;&gt; result = collect_pyfile('/path/to/single_hook.py')\n        &gt;&gt;&gt; if result:\n        ...     print(\"Found Python file:\", result[0])\n    \"\"\"\n    if os.path.isdir(path):\n        pattern = os.path.join(path, \"**\", \"*.py\")\n        return glob.glob(pattern, recursive=True)\n    elif os.path.isfile(path) and path.endswith(\".py\"):\n        return [path]\n    return None\n</code></pre>"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils.collect_pyfile--collect-python-files-from-a-directory","title":"Collect Python files from a directory","text":"<p>files = collect_pyfile('/path/to/hooks') if files: ...     print(f\"Found {len(files)} Python files\")</p>"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils.collect_pyfile--check-a-single-file","title":"Check a single file","text":"<p>result = collect_pyfile('/path/to/single_hook.py') if result: ...     print(\"Found Python file:\", result[0])</p>"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils.load_hook","title":"load_hook","text":"<pre><code>load_hook(file_path)\n</code></pre> <p>Load a Python module from a file path as a hook.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>Path to the Python file to load as a hook.</p> <p> </p> RETURNS DESCRIPTION <p>Optional[module]: The loaded module if successful, None if loading fails.</p> Example Source code in <code>ibkr_event_daemon/utils.py</code> <pre><code>def load_hook(file_path):\n    \"\"\"Load a Python module from a file path as a hook.\n\n    Args:\n        file_path: Path to the Python file to load as a hook.\n\n    Returns:\n        Optional[module]: The loaded module if successful, None if loading fails.\n\n    Example:\n        &gt;&gt;&gt; # Load a hook module\n        &gt;&gt;&gt; hook = load_hook('/path/to/my_hook.py')\n        &gt;&gt;&gt; if hook:\n        ...     # Initialize the hook with IB client\n        ...     hook.setup(ib, logger)\n        ... else:\n        ...     print(\"Failed to load hook\")\n    \"\"\"\n    try:\n        spec = importlib.util.spec_from_file_location(\"hook\", file_path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n        return module\n    except Exception as e:\n        logger.error(\"Failed to load hook from %s: %s\", file_path, str(e))\n        return None\n</code></pre>"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils.load_hook--load-a-hook-module","title":"Load a hook module","text":"<p>hook = load_hook('/path/to/my_hook.py') if hook: ...     # Initialize the hook with IB client ...     hook.setup(ib, logger) ... else: ...     print(\"Failed to load hook\")</p>"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils.prepare_task_path","title":"prepare_task_path","text":"<pre><code>prepare_task_path(file_path: List[str]) -&gt; list[str]\n</code></pre> <p>Prepare a list of Python file paths from a list of directory paths.</p> <p>This function processes a list of directory paths and collects all Python files within those directories, excluding init.py files.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>List of directory paths to search for Python files.</p> <p> TYPE: <code>List[str]</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: List of Python file paths, excluding init.py files.</p> Example Source code in <code>ibkr_event_daemon/utils.py</code> <pre><code>def prepare_task_path(file_path: List[str]) -&gt; list[str]:\n    \"\"\"Prepare a list of Python file paths from a list of directory paths.\n\n    This function processes a list of directory paths and collects all Python files\n    within those directories, excluding __init__.py files.\n\n    Args:\n        file_path: List of directory paths to search for Python files.\n\n    Returns:\n        list[str]: List of Python file paths, excluding __init__.py files.\n\n    Example:\n        &gt;&gt;&gt; # Process a list of paths\n        &gt;&gt;&gt; paths = ['./example', '/another/path']\n        &gt;&gt;&gt; files = prepare_task_path(paths)\n        &gt;&gt;&gt; print(f\"Found {len(files)} Python files\")\n    \"\"\"\n    env_data = [path for path in file_path if os.path.exists(path)]\n    py_files: list[str] = []\n    for path in env_data:\n        py_files.extend(collect_pyfile(path))\n    py_files = [file for file in py_files if not file.endswith(\"__init__.py\")]\n    return py_files\n</code></pre>"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils.prepare_task_path--process-a-list-of-paths","title":"Process a list of paths","text":"<p>paths = ['./example', '/another/path'] files = prepare_task_path(paths) print(f\"Found {len(files)} Python files\")</p>"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils.setup_logger","title":"setup_logger","text":"<pre><code>setup_logger(log_level: str = 'INFO', log_file: Optional[Union[str, Path]] = None, rotation: str = '100 MB', retention: str = '1 week', format: str = '&lt;green&gt;{time:YYYY-MM-DD HH:mm:ss.SSS}&lt;/green&gt; | &lt;level&gt;{level: &lt;8}&lt;/level&gt; | &lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - &lt;level&gt;{message}&lt;/level&gt;') -&gt; None\n</code></pre> <p>Set up loguru logger with specified configuration.</p> <p>This function configures the loguru logger with custom formatting and handlers. It removes any existing handlers and sets up console and optional file logging.</p> PARAMETER DESCRIPTION <code>log_level</code> <p>The minimum logging level to display. Defaults to \"INFO\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'INFO'</code> </p> <code>log_file</code> <p>Optional path to log file. If provided, logs will be written to this file.</p> <p> TYPE: <code>Optional[Union[str, Path]]</code> DEFAULT: <code>None</code> </p> <code>rotation</code> <p>When to rotate the log file. Defaults to \"100 MB\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'100 MB'</code> </p> <code>retention</code> <p>How long to keep log files. Defaults to \"1 week\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'1 week'</code> </p> <code>format</code> <p>The log message format string. Defaults to a colored format with timestamp,    level, module, function, line number, and message.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'&lt;green&gt;{time:YYYY-MM-DD HH:mm:ss.SSS}&lt;/green&gt; | &lt;level&gt;{level: &lt;8}&lt;/level&gt; | &lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - &lt;level&gt;{message}&lt;/level&gt;'</code> </p> Example Source code in <code>ibkr_event_daemon/utils.py</code> <pre><code>def setup_logger(\n    log_level: str = \"INFO\",\n    log_file: Optional[Union[str, Path]] = None,\n    rotation: str = \"100 MB\",\n    retention: str = \"1 week\",\n    format: str = \"&lt;green&gt;{time:YYYY-MM-DD HH:mm:ss.SSS}&lt;/green&gt; | &lt;level&gt;{level: &lt;8}&lt;/level&gt; | &lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - &lt;level&gt;{message}&lt;/level&gt;\",  # noqa: E501\n) -&gt; None:\n    \"\"\"Set up loguru logger with specified configuration.\n\n    This function configures the loguru logger with custom formatting and handlers.\n    It removes any existing handlers and sets up console and optional file logging.\n\n    Args:\n        log_level: The minimum logging level to display. Defaults to \"INFO\".\n        log_file: Optional path to log file. If provided, logs will be written to this file.\n        rotation: When to rotate the log file. Defaults to \"100 MB\".\n        retention: How long to keep log files. Defaults to \"1 week\".\n        format: The log message format string. Defaults to a colored format with timestamp,\n               level, module, function, line number, and message.\n\n    Example:\n        &gt;&gt;&gt; # Basic setup with console logging\n        &gt;&gt;&gt; setup_logger()\n        &gt;&gt;&gt; # Setup with file logging\n        &gt;&gt;&gt; setup_logger(\n        ...     log_level=\"DEBUG\",\n        ...     log_file=\"app.log\",\n        ...     rotation=\"500 MB\",\n        ...     retention=\"2 weeks\"\n        ... )\n        &gt;&gt;&gt; logger.info(\"Logger configured successfully\")\n    \"\"\"\n    # Remove any existing handlers\n    logger.remove()\n\n    # Add console handler\n    logger.add(sys.stderr, format=format, level=log_level, colorize=True)\n\n    # Add file handler if log_file is specified\n    if log_file:\n        log_file = Path(log_file)\n        # Create parent directories if they don't exist\n        log_file.parent.mkdir(parents=True, exist_ok=True)\n\n        logger.add(\n            str(log_file), format=format, level=log_level, rotation=rotation, retention=retention, compression=\"zip\"\n        )\n\n    logger.info(f\"Logger setup completed. Level: {log_level}, File: {log_file if log_file else 'None'}\")\n</code></pre>"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils.setup_logger--basic-setup-with-console-logging","title":"Basic setup with console logging","text":"<p>setup_logger()</p>"},{"location":"reference/ibkr_event_daemon/utils/#ibkr_event_daemon.utils.setup_logger--setup-with-file-logging","title":"Setup with file logging","text":"<p>setup_logger( ...     log_level=\"DEBUG\", ...     log_file=\"app.log\", ...     rotation=\"500 MB\", ...     retention=\"2 weeks\" ... ) logger.info(\"Logger configured successfully\")</p>"}]}